generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  email           String        @unique
  password        String
  name            String
  createdAt       DateTime      @default(now())
  syllabusContent String?
  standard        String
  interests       String

  dataSources DataSource[]
  aiChats     AIChat[]
  reminders   Reminder[]
  contents    AIContent[]
  subjects    Subject[]      // For relation
  topics      Topic[]        // For relation
  tags        Tag[]          // For relation
}

model DataSource {
  id           String           @id @default(uuid())
  name         String
  type         DataSourceType
  fileType     String
  size         Int              @default(0)
  uploadDate   DateTime         @default(now())
  source       String           // URL or filename
  sourceUrl    String?          // External source URL
  status       DataSourceStatus
  progress     Int?             // Processing percentage
  content      String?          // Extracted content for RAG
  url          String?          // Path to file
  
  // Subject relation
  subjectId    String?
  subject      Subject?         @relation(fields: [subjectId], references: [id])
  
  // Topic relation
  topicId      String?
  topic        Topic?           @relation(fields: [topicId], references: [id])
  
  // Other fields
  description  String?
  thumbnail    String?
  tags         DataSourceTag[]  // Changed to relation
  
  // User relation
  userId       String
  user         User             @relation(fields: [userId], references: [id])
  createdAt    DateTime         @default(now())
}

enum DataSourceStatus {
  ERROR
  PROCESSING
  COMPLETED
  READY
}

enum DataSourceType {
  WEBSITE
  TEXT
  DOCS
  PDF
  IMAGE
  VIDEO
  AUDIO
  YOUTUBE
}

model Subject {
  id            String       @id @default(uuid())
  name          String
  color         String       @default("bg-blue-500")
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  materialCount Int          @default(0)

  // Add user relation
  userId        String
  user          User         @relation(fields: [userId], references: [id])

  topics       Topic[]
  dataSources  DataSource[]
}

model Topic {
  id            String       @id @default(uuid())
  name          String
  subjectId     String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  materialCount Int          @default(0)

  // Add user relation
  userId        String
  user          User         @relation(fields: [userId], references: [id])

  subject      Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  dataSources  DataSource[]
}

model Tag {
  id            String         @id @default(uuid())
  name          String         @unique
  materialCount Int            @default(0)

  // Add user relation
  userId        String
  user          User           @relation(fields: [userId], references: [id])

  dataSources  DataSourceTag[]
}

model DataSourceTag {
  dataSourceId String
  tagId        String

  dataSource  DataSource @relation(fields: [dataSourceId], references: [id], onDelete: Cascade)
  tag         Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([dataSourceId, tagId])
}

model AIChat {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  messages  Json
  createdAt DateTime @default(now())
}

model AIContent {
  id          String   @id @default(uuid())
  title       String
  description String
  content     String
  tags        String[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
}

model Reminder {
  id          String   @id @default(uuid())
  title       String
  description String?
  time        DateTime
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
}