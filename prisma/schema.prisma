// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String
  name            String
  createdAt       DateTime @default(now())
  syllabusContent String? // add it later after user uploads syllabus using gemini's OCR
  standard        String
  interests       String

  dataSources DataSource[]
  aiChats     AIChat[]
  reminders   Reminder[]
  contents    AIContent[]
  materials   Material[] // Add this line to establish bidirectional relation
}

model DataSource {
  id          String           @id @default(uuid())
  type        DataSourceType
  fileType    String
  name        String?
  thumbnail   String?
  content     String? // text/chunks/embeddings for RAG
  subject     String?
  topic       String?
  description String?
  tags        String[]         @default([])
  source      String // URL or filename
  status      DataSourceStatus
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime         @default(now())
}

enum DataSourceStatus {
  ERROR
  PROCESSING
  COMPLETED
}

enum DataSourceType {
  WEBSITE
  TEXT
  DOCS
}

model AIChat {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  messages  Json
  createdAt DateTime @default(now())
}

model AIContent {
  id          String   @id @default(uuid())
  title       String
  description String
  content     String
  tags        String[]
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
}

model Reminder {
  id          String   @id @default(uuid())
  title       String
  description String?
  time        DateTime
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime @default(now())
}

model Subject {
  id            String   @id @default(uuid())
  name          String
  color         String   @default("bg-blue-500")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  materialCount Int      @default(0)

  topics    Topic[]
  materials Material[]
}

model Topic {
  id            String   @id @default(uuid())
  name          String
  subjectId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  materialCount Int      @default(0)

  subject   Subject    @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  materials Material[]
}

model Tag {
  id            String @id @default(uuid())
  name          String @unique
  materialCount Int    @default(0)

  materials MaterialTag[]
}

model Material {
  id          String   @id @default(uuid())
  name        String
  type        String // pdf, png, xlsx, docx, youtube, etc.
  size        Int      @default(0)
  uploadDate  DateTime @default(now())
  subjectId   String
  topicId     String?
  description String?
  thumbnail   String?
  status      String   @default("processing") // processing, ready, error
  progress    Int? // processing progress percentage
  url         String?
  source      String // upload, youtube, etc.
  sourceUrl   String? // for external sources
  aiProcessed Boolean  @default(false)
  aiSummary   String?
  aiKeyPoints String[] @default([])
  userId      String

  subject Subject       @relation(fields: [subjectId], references: [id])
  topic   Topic?        @relation(fields: [topicId], references: [id])
  user    User          @relation(fields: [userId], references: [id])
  tags    MaterialTag[]
}

model MaterialTag {
  materialId String
  tagId      String

  material Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  tag      Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([materialId, tagId])
}
